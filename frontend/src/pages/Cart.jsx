import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useNavigate

const Cart = () => {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(false);

  const token = localStorage.getItem("token");
  const userId = localStorage.getItem("user_id");
  const navigate = useNavigate(); // ‚úÖ init navigate

  useEffect(() => {
    if (!token) {
      window.location.href = "/login";
      return;
    }
    fetchCart();
  }, [token]);

  // ‡∏î‡∏∂‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const fetchCart = async () => {
    try {
      setLoading(true);
      const res = await axios.get(
        `${import.meta.env.VITE_CRUD_API_URL}/carts/${userId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setCart(res.data);
    } catch (err) {
      console.error(err);
      alert("‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setLoading(false);
    }
  };

  // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cart
  const removeFromCart = async (productId) => {
    try {
      await axios.delete(
        `${import.meta.env.VITE_CRUD_API_URL}/carts/${userId}/products/${productId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      fetchCart();
    } catch (err) {
      console.error(err);
      alert("‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const clearCart = async () => {
    if (!window.confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
    try {
      await axios.delete(
        `${import.meta.env.VITE_CRUD_API_URL}/carts/${userId}/clear`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setCart(null);
    } catch (err) {
      console.error(err);
      alert("‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  // Checkout
  const checkout = async () => {
    if (!window.confirm("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠?")) return;
    try {
      await axios.post(
        `${import.meta.env.VITE_CRUD_API_URL}/carts/${userId}/checkout`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert("‚úÖ Checkout success");
      setCart(null);
    } catch (err) {
      console.error(err);
      alert("Checkout ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  if (loading) return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;
  if (!cart || !cart.products || cart.products.length === 0) {
    return (
      <div style={{ padding: "2rem" }}>
        <h2>Cart</h2>
        <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
        <button onClick={() => navigate("/products")}>‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>
      </div>
    );
  }

  return (
    <div style={{ padding: "2rem" }}>
      <h2>üõí Cart</h2>
      <ul>
        {cart.products.map((p) => (
          <li key={p.id}>
            {p.product?.name ?? p.product_id} ‚Äî {p.quantity} ‡∏ä‡∏¥‡πâ‡∏ô
            <span style={{ marginLeft: "0.5rem", color: "gray" }}>
              ({p.product?.price ?? "?"} ‡∏ø)
            </span>
            <button
              onClick={() => removeFromCart(p.product_id)}
              style={{ marginLeft: "1rem", color: "red" }}
            >
              ‡∏•‡∏ö
            </button>
          </li>
        ))}
      </ul>
      <div style={{ marginTop: "1rem" }}>
        <button onClick={checkout} style={{ marginRight: "1rem" }}>
          ‚úÖ Checkout
        </button>
        <button onClick={clearCart} style={{ marginRight: "1rem", color: "red" }}>
          üóëÔ∏è Clear Cart
        </button>
        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Products */}
        <button onClick={() => navigate("/products")}>
          ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </button>
      </div>
    </div>
  );
};

export default Cart;
